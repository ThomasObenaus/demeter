// Code generated by MockGen. DO NOT EDIT.
// Source: nomadWorker/nomadclient_IF.go

// Package mock_nomadWorker is a generated GoMock package.
package mock_nomadWorker

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/nomad/api"
	reflect "reflect"
)

// MockNodes is a mock of Nodes interface
type MockNodes struct {
	ctrl     *gomock.Controller
	recorder *MockNodesMockRecorder
}

// MockNodesMockRecorder is the mock recorder for MockNodes
type MockNodesMockRecorder struct {
	mock *MockNodes
}

// NewMockNodes creates a new mock instance
func NewMockNodes(ctrl *gomock.Controller) *MockNodes {
	mock := &MockNodes{ctrl: ctrl}
	mock.recorder = &MockNodesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodes) EXPECT() *MockNodesMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockNodes) List(q *api.QueryOptions) ([]*api.NodeListStub, *api.QueryMeta, error) {
	ret := m.ctrl.Call(m, "List", q)
	ret0, _ := ret[0].([]*api.NodeListStub)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List
func (mr *MockNodesMockRecorder) List(q interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodes)(nil).List), q)
}

// ToggleEligibility mocks base method
func (m *MockNodes) ToggleEligibility(nodeID string, eligible bool, q *api.WriteOptions) (*api.NodeEligibilityUpdateResponse, error) {
	ret := m.ctrl.Call(m, "ToggleEligibility", nodeID, eligible, q)
	ret0, _ := ret[0].(*api.NodeEligibilityUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleEligibility indicates an expected call of ToggleEligibility
func (mr *MockNodesMockRecorder) ToggleEligibility(nodeID, eligible, q interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleEligibility", reflect.TypeOf((*MockNodes)(nil).ToggleEligibility), nodeID, eligible, q)
}
